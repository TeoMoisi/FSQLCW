/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.language.fsql.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.language.fsql.fSQL.FSQL
import uk.ac.kcl.language.fsql.fSQL.DatabaseStatements
import uk.ac.kcl.language.fsql.fSQL.CreateDB
import uk.ac.kcl.language.fsql.fSQL.UseDB

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FSQLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as FSQL
		
		val className = resource.deriveClassNameFor
		
		fsa.generateFile(className + '.sql', model.doGenerateCode)
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment

		origName.substring(0, origName.indexOf('.'))
	}
	
	def String doGenerateCode(FSQL program) '''
		«program.dbStatements.map[generateSQLDBCommand].join('\n')»
		
	'''
	
	dispatch def String generateSQLDBCommand(DatabaseStatements dbStmt) '''
	'''
	
	dispatch def String generateSQLDBCommand(CreateDB createDB) '''
		CREATE DATABASE «createDB.getName»;
	'''
	
	dispatch def String generateSQLDBCommand(UseDB useDB) '''
		USE «useDB.getDatabase().^var.name»;
	'''
}
